// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PortalDeParceiros.Infrastructure.Configuration.Context;

namespace PortalDeParceiros.Infrastructure.Migrations
{
    [DbContext(typeof(PortalParceiroDbContext))]
    [Migration("20190618165820_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cep")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("City")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Cnpj");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("FirstAcess");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("State")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("Status");

                    b.Property<int?>("UserCommercialId");

                    b.HasKey("Id");

                    b.HasIndex("UserCommercialId");

                    b.ToTable("company");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("group");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("Varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("GroupId");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<bool>("Partner");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("permission");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<decimal>("CreditValue");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<decimal>("PropertyPrice");

                    b.Property<int?>("StageId");

                    b.Property<bool>("Status");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.HasIndex("UserId");

                    b.ToTable("proposal");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.ProposalDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("DocumentType");

                    b.Property<int?>("ProposalsId");

                    b.HasKey("Id");

                    b.HasIndex("ProposalsId");

                    b.ToTable("proposalDocument");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("stage");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Access");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("Novi");

                    b.Property<string>("Observation");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone");

                    b.Property<bool>("Status");

                    b.Property<int?>("UserLeaderId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserLeaderId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.UserPermission", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("PermissionId");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("userpermission");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.Company", b =>
                {
                    b.HasOne("PortalDeParceiros.Domain.Entity.User", "UserCommercial")
                        .WithMany()
                        .HasForeignKey("UserCommercialId");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.Permission", b =>
                {
                    b.HasOne("PortalDeParceiros.Domain.Entity.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.Proposal", b =>
                {
                    b.HasOne("PortalDeParceiros.Domain.Entity.Stage", "Stage")
                        .WithMany("Proposal")
                        .HasForeignKey("StageId");

                    b.HasOne("PortalDeParceiros.Domain.Entity.User", "User")
                        .WithMany("Proposals")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.ProposalDocument", b =>
                {
                    b.HasOne("PortalDeParceiros.Domain.Entity.Proposal", "Proposals")
                        .WithMany("ProposalDocuments")
                        .HasForeignKey("ProposalsId");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.User", b =>
                {
                    b.HasOne("PortalDeParceiros.Domain.Entity.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.HasOne("PortalDeParceiros.Domain.Entity.User", "UserLeader")
                        .WithMany()
                        .HasForeignKey("UserLeaderId");
                });

            modelBuilder.Entity("PortalDeParceiros.Domain.Entity.UserPermission", b =>
                {
                    b.HasOne("PortalDeParceiros.Domain.Entity.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalDeParceiros.Domain.Entity.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
